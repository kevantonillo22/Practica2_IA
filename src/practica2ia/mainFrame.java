/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica2ia;

import java.util.Random;

/**
 *
 * @author Kev
 */
public class mainFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
    
    Genetico algoritmo;
    int iteracion = 0;
    
    public mainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parametros"));

        jLabel1.setText("Codificación");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Letras", "Alfanumérico" }));

        jLabel2.setText("Tamaño de población");

        jLabel3.setText("Selección de padres");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tipo1", "Tipo2" }));

        jLabel4.setText("Forma de cruce");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cruce1X", "Mascara de cruce" }));

        jLabel5.setText("Número de individuos para mutación");

        jTextField1.setText("4");
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jButton1.setText("Primera Iteracion");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Etilista general", "Aleatorio" }));

        jLabel8.setText("Tipo reemplazo");

        jTextField3.setText("10");
        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField3FocusLost(evt);
            }
        });
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        jLabel9.setText("Criterio de finalización");

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Convergencia", "Iteraciones", "Solucion encontrada" }));
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });

        jButton2.setText(">");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("Limpiar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField4.setText("80");

        jLabel10.setText("%");

        jButton5.setText("Analisis Completo");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel11.setText("Mostrar");

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todo", "10 mejores" }));
        jComboBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(195, 195, 195))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel11)
                            .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel6.setText("Frase");

        jTextField2.setText("hola mundo");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jLabel7.setText("Iteraciones");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String codificacion = jComboBox1.getSelectedItem() + "";
        int tamPoblacion = Integer.parseInt(jTextField3.getText());
        String seleccionPadres = jComboBox2.getSelectedItem() + "";
        int cruce = jComboBox3.getSelectedIndex();
        int tamIndividuo = jTextField2.getText().trim().length();
        String frase = jTextField2.getText().trim();
        int numMutacion = Integer.parseInt(jTextField1.getText());
        int tipoReemplazo = jComboBox4.getSelectedIndex();
        String criterioFinalizacion = jComboBox5.getSelectedItem() + "";
        iteracion++;
        algoritmo = new Genetico(tamPoblacion, tamIndividuo, frase, numMutacion);
        //generamos la poblacion
        if(codificacion.equals("Letras"))
        {
            algoritmo.generarPoblacionLetras();
        }
        else
        {
            algoritmo.generarPoblacionAlfaNumerico();
        }
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        algoritmo.Emparejar();
        
        String val = algoritmo.mostrarPoblacion();
        jTextArea1.setText( "ITERACION\n" + iteracion + " \n\n");
        jTextArea1.setText(jTextArea1.getText() + "PADRES--Fitness Total="  + algoritmo.fitnessTotal_ant + "\n" + val);
        
        
        //seleccionamos tipo de padre
        if(seleccionPadres.equals("Tipo1"))
        {
            algoritmo.seleccionTipo1();
        }
        else
        {
            algoritmo.SeleccionTipo2();
        }
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        
        //val = algoritmo.mostrarPoblacion();
        //jTextArea1.setText(jTextArea1.getText() + "SELECCION_TIPO1\n" +val);
        
        algoritmo.Emparejar();
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        //val = algoritmo.mostrarPoblacion();
        //jTextArea1.setText( jTextArea1.getText() + "EMPAREJADA2\n" + val);
        
        //realización de cruce
        if(cruce == 0)
        {
            algoritmo.cruce1X();
        }
        else
        {
            algoritmo.cruceMascarCruce();
        }
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        //val = algoritmo.mostrarPoblacion();
        //jTextArea1.setText(jTextArea1.getText() + "CRUCE1X\n" + val);
        
        algoritmo.mutar();
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        //val = algoritmo.mostrarPoblacion();
        //jTextArea1.setText(jTextArea1.getText() + "MUTACION\n" + val);
        
        //calculamos fitness de las poblaciones
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        
        if(tipoReemplazo == 0)
        {
            algoritmo.reemplazoEtilistaGeneral();
        }
        else
        {
            algoritmo.reemplazoAleatorio();
        }
        
        val = algoritmo.mostrarPoblacion();
        jTextArea1.setText(jTextArea1.getText() + "DESCENDIENTES--Fitness Total="  + algoritmo.fitnessTotal_sig + "\n" + val);
        
        jButton2.setEnabled(true);
        jButton1.setEnabled(false);
        
        if(jComboBox6.getSelectedIndex() == 1)
        {
            String r = algoritmo.mostrar10mejores();
            r = "ITERACION\n" + iteracion + " \n\n" + r;
            jTextArea1.setText(r);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        char caracter = evt.getKeyChar();

        // Verificar si la tecla pulsada no es un digito
        if(((caracter < '0') ||
           (caracter > '9')) &&
           (caracter != '\b' /*corresponde a BACK_SPACE*/))
        {
           evt.consume();  // ignorar el evento de teclado
        }
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        char caracter = evt.getKeyChar();

        // Verificar si la tecla pulsada no es un digito
        if(((caracter < '0') ||
           (caracter > '9')) &&
           (caracter != '\b' /*corresponde a BACK_SPACE*/))
        {
           evt.consume();  // ignorar el evento de teclado
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        int caracter = evt.getKeyChar();
        
        //Letras
        if(jComboBox1.getSelectedIndex() == 0)
        {
            // solo letras
            if(((caracter > 0 && caracter < 65) || (caracter > 90 && caracter < 97) || (caracter > 122 && caracter <= 127)) &&
               (caracter != '\b' /*corresponde a BACK_SPACE*/) && caracter != 32)
            {
               evt.consume();  // ignorar el evento de teclado
            }
        }
        else
        {
            // Verificar si la tecla pulsada no es un digito
            if(((caracter > 0 && caracter < 48) || (caracter > 57 && caracter < 65) || (caracter > 90 && caracter < 97) || (caracter > 122 && caracter <= 127)) &&
               (caracter != '\b' /*corresponde a BACK_SPACE*/) && caracter != 32)
            {
               evt.consume();  // ignorar el evento de teclado
            }
        }
        
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String codificacion = jComboBox1.getSelectedItem() + "";
        int tamPoblacion = Integer.parseInt(jTextField3.getText());
        String seleccionPadres = jComboBox2.getSelectedItem() + "";
        int cruce = jComboBox3.getSelectedIndex();
        int tamIndividuo = jTextField2.getText().trim().length();
        String frase = jTextField2.getText().trim();
        int numMutacion = Integer.parseInt(jTextField1.getText());
        int tipoReemplazo = jComboBox4.getSelectedIndex();
        String criterioFinalizacion = jComboBox5.getSelectedItem() + "";
        iteracion++;
        
        algoritmo.prepararNuevaIteracion();
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        algoritmo.Emparejar();
        
        String val = algoritmo.mostrarPoblacion();
        jTextArea1.setText("ITERACION\n" + iteracion + " \n\n");
        jTextArea1.setText(jTextArea1.getText() + "PADRES--Fitness Total="  + algoritmo.fitnessTotal_ant + "\n" + val);
            
        //seleccionamos tipo de padre
        if(seleccionPadres.equals("Tipo1"))
        {
            algoritmo.seleccionTipo1();
        }
        else
        {
            algoritmo.SeleccionTipo2();
        }
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        
        //val = algoritmo.mostrarPoblacion();
        //jTextArea1.setText(jTextArea1.getText() + "SELECCION_TIPO1\n" +val);
        
        algoritmo.Emparejar();
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        //val = algoritmo.mostrarPoblacion();
        //jTextArea1.setText( jTextArea1.getText() + "EMPAREJADA2\n" + val);
        
        //realización de cruce
        if(cruce == 0)
        {
            algoritmo.cruce1X();
        }
        else
        {
            algoritmo.cruceMascarCruce();
        }
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        //val = algoritmo.mostrarPoblacion();
        //jTextArea1.setText(jTextArea1.getText() + "CRUCE1X\n" + val);
        
        algoritmo.mutar();
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        //val = algoritmo.mostrarPoblacion();
        //jTextArea1.setText(jTextArea1.getText() + "MUTACION\n" + val);
        
        //calculamos fitness de las poblaciones
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        
        if(tipoReemplazo == 0)
        {
            algoritmo.reemplazoEtilistaGeneral();
        }
        else
        {
            algoritmo.reemplazoAleatorio();
        }
        
        val = algoritmo.mostrarPoblacion();
        jTextArea1.setText(jTextArea1.getText() + "DESCENDIENTES--Fitness Total="  + algoritmo.fitnessTotal_sig + "\n" + val);
        
        if(jComboBox6.getSelectedIndex() == 1)
        {
            String r = algoritmo.mostrar10mejores();
            r = "ITERACION\n" + iteracion + " \n\n" + r;
            jTextArea1.setText(r);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        iteracion = 0;
        jTextArea1.setText("");
        jButton2.setEnabled(false);
        jButton1.setEnabled(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        if(jComboBox5.getSelectedIndex() == 0)
        {
            jLabel10.setText("%");
            jTextField4.setEnabled(true);
        }else if(jComboBox5.getSelectedIndex() == 1)
        {
            jLabel10.setText("");
            jTextField4.setEnabled(true);
        }
        else
        {
            jLabel10.setText("");
            jTextField4.setEnabled(false);
        }
    }//GEN-LAST:event_jComboBox5ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        
        int validacion = jComboBox5.getSelectedIndex();
        
        if(validacion == 0)
        {
            ejecutarConvergencia();
        }
        else if(validacion == 1)
        {
            ejecutarIteraciones();
        }
        else
        {
            ejecutarEncontrarSolucion();
        }
        
        if(jComboBox6.getSelectedIndex() == 1)
        {
            String r = algoritmo.mostrar10mejores();
            jTextArea1.setText(r);
        }
        
        jButton2.setEnabled(true);
        jButton1.setEnabled(false);
        
       
       
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jComboBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox6ActionPerformed

    private void jTextField3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField3FocusLost
        int v = Integer.parseInt(jTextField3.getText());
        
        if(v % 2 != 0)
        {
            v++;
            jTextField3.setText(v + "");
        }
    }//GEN-LAST:event_jTextField3FocusLost
    
    public void ejecutarEncontrarSolucion()
    {
        String codificacion = jComboBox1.getSelectedItem() + "";
        int tamPoblacion = Integer.parseInt(jTextField3.getText());
        String seleccionPadres = jComboBox2.getSelectedItem() + "";
        int cruce = jComboBox3.getSelectedIndex();
        int tamIndividuo = jTextField2.getText().trim().length();
        String frase = jTextField2.getText().trim();
        int numMutacion = Integer.parseInt(jTextField1.getText());
        int tipoReemplazo = jComboBox4.getSelectedIndex();
        String criterioFinalizacion = jComboBox5.getSelectedItem() + "";
        iteracion++;
        algoritmo = new Genetico(tamPoblacion, tamIndividuo, frase, numMutacion);
        //double val_objetivo = 0.9*algoritmo.tamPoblacion*algoritmo.tamIndividuo*valor_field;
        //generamos la poblacion
        if(codificacion.equals("Letras"))
        {
            algoritmo.generarPoblacionLetras();
        }
        else
        {
            algoritmo.generarPoblacionAlfaNumerico();
        }
        algoritmo.calcularFitness_ant();
        algoritmo.calcularFitness_sig();
        
        while (algoritmo.fitnessTotal_sig != 0) 
        {
            
            
            iteracion++;
            algoritmo.prepararNuevaIteracion();
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();
            algoritmo.Emparejar();

            String val = algoritmo.mostrarPoblacion();
            jTextArea1.setText( "ITERACION\n" + iteracion + " \n\n");
            jTextArea1.setText(jTextArea1.getText() + "PADRES--Fitness Total="  + algoritmo.fitnessTotal_ant + "\n" + val);


            //seleccionamos tipo de padre
            if(seleccionPadres.equals("Tipo1"))
            {
                algoritmo.seleccionTipo1();
            }
            else
            {
                algoritmo.SeleccionTipo2();
            }
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();

            //val = algoritmo.mostrarPoblacion();
            //jTextArea1.setText(jTextArea1.getText() + "SELECCION_TIPO1\n" +val);

            algoritmo.Emparejar();
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();
            //val = algoritmo.mostrarPoblacion();
            //jTextArea1.setText( jTextArea1.getText() + "EMPAREJADA2\n" + val);

            //realización de cruce
            if(cruce == 0)
            {
                algoritmo.cruce1X();
            }
            else
            {
                algoritmo.cruceMascarCruce();
            }
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();
            //val = algoritmo.mostrarPoblacion();
            //jTextArea1.setText(jTextArea1.getText() + "CRUCE1X\n" + val);

            algoritmo.mutar();
            
            //val = algoritmo.mostrarPoblacion();
            //jTextArea1.setText(jTextArea1.getText() + "MUTACION\n" + val);

            

            if(tipoReemplazo == 0)
            {
                algoritmo.reemplazoEtilistaGeneral();
            }
            else
            {
                algoritmo.reemplazoAleatorio();
            }
            
            //calculamos fitness de las poblaciones
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();
            
            val = algoritmo.mostrarPoblacion();
            jTextArea1.setText(jTextArea1.getText() + "DESCENDIENTES--Fitness Total="  + algoritmo.fitnessTotal_sig + "\n" + val);
            
            
        }
    }
    public void ejecutarConvergencia()
    {
        
        double valor_convergencia = Double.parseDouble(jTextField4.getText()) / 100;
        
        System.out.println(valor_convergencia);
        String codificacion = jComboBox1.getSelectedItem() + "";
        int tamPoblacion = Integer.parseInt(jTextField3.getText());
        String seleccionPadres = jComboBox2.getSelectedItem() + "";
        int cruce = jComboBox3.getSelectedIndex();
        int tamIndividuo = jTextField2.getText().trim().length();
        String frase = jTextField2.getText().trim();
        int numMutacion = Integer.parseInt(jTextField1.getText());
        int tipoReemplazo = jComboBox4.getSelectedIndex();
        String criterioFinalizacion = jComboBox5.getSelectedItem() + "";
        iteracion++;
        algoritmo = new Genetico(tamPoblacion, tamIndividuo, frase, numMutacion);
        //double val_objetivo = 0.9*algoritmo.tamPoblacion*algoritmo.tamIndividuo*valor_field;
        //generamos la poblacion
        if(codificacion.equals("Letras"))
        {
            algoritmo.generarPoblacionLetras();
        }
        else
        {
            algoritmo.generarPoblacionAlfaNumerico();
        }
        
        double porcentaje = 0;
        while (valor_convergencia > porcentaje) 
        {
            
            
            iteracion++;
            algoritmo.prepararNuevaIteracion();
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();
            algoritmo.Emparejar();

            String val = algoritmo.mostrarPoblacion();
            jTextArea1.setText( "ITERACION\n" + iteracion + " \n\n");
            jTextArea1.setText(jTextArea1.getText() + "PADRES--Fitness Total="  + algoritmo.fitnessTotal_ant + "\n" + val);


            //seleccionamos tipo de padre
            if(seleccionPadres.equals("Tipo1"))
            {
                algoritmo.seleccionTipo1();
            }
            else
            {
                algoritmo.SeleccionTipo2();
            }
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();

            //val = algoritmo.mostrarPoblacion();
            //jTextArea1.setText(jTextArea1.getText() + "SELECCION_TIPO1\n" +val);

            algoritmo.Emparejar();
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();
            //val = algoritmo.mostrarPoblacion();
            //jTextArea1.setText( jTextArea1.getText() + "EMPAREJADA2\n" + val);

            //realización de cruce
            if(cruce == 0)
            {
                algoritmo.cruce1X();
            }
            else
            {
                algoritmo.cruceMascarCruce();
            }
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();
            //val = algoritmo.mostrarPoblacion();
            //jTextArea1.setText(jTextArea1.getText() + "CRUCE1X\n" + val);

            algoritmo.mutar();
            
            //val = algoritmo.mostrarPoblacion();
            //jTextArea1.setText(jTextArea1.getText() + "MUTACION\n" + val);

            

            if(tipoReemplazo == 0)
            {
                algoritmo.reemplazoEtilistaGeneral();
            }
            else
            {
                algoritmo.reemplazoAleatorio();
            }
            
            //calculamos fitness de las poblaciones
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();
            
            val = algoritmo.mostrarPoblacion();
            jTextArea1.setText(jTextArea1.getText() + "DESCENDIENTES--Fitness Total="  + algoritmo.fitnessTotal_sig + "\n" + val);
            
            if(algoritmo.fitnessTotal_ant > algoritmo.fitnessTotal_sig)
            {
                porcentaje = (double)algoritmo.fitnessTotal_sig /(double)algoritmo.fitnessTotal_ant;
            }
            else if(algoritmo.fitnessTotal_ant < algoritmo.fitnessTotal_sig)
            {
                porcentaje = (double)algoritmo.fitnessTotal_ant /(double)algoritmo.fitnessTotal_sig;
            }
            else
            {
                porcentaje = 1;
            }
            
            System.out.println(porcentaje);
            System.out.println(algoritmo.fitnessTotal_ant);
            System.out.println(algoritmo.fitnessTotal_sig);
        }
    }
    public void ejecutarIteraciones()
    {
        int valor_field = Integer.parseInt(jTextField4.getText());
        
        String codificacion = jComboBox1.getSelectedItem() + "";
        int tamPoblacion = Integer.parseInt(jTextField3.getText());
        String seleccionPadres = jComboBox2.getSelectedItem() + "";
        int cruce = jComboBox3.getSelectedIndex();
        int tamIndividuo = jTextField2.getText().trim().length();
        String frase = jTextField2.getText().trim();
        int numMutacion = Integer.parseInt(jTextField1.getText());
        int tipoReemplazo = jComboBox4.getSelectedIndex();
        String criterioFinalizacion = jComboBox5.getSelectedItem() + "";
        iteracion++;
        algoritmo = new Genetico(tamPoblacion, tamIndividuo, frase, numMutacion);
        //generamos la poblacion
        if(codificacion.equals("Letras"))
        {
            algoritmo.generarPoblacionLetras();
        }
        else
        {
            algoritmo.generarPoblacionAlfaNumerico();
        }
        
        for (int i = 0; i <= valor_field - 1; i++) 
        {
            iteracion++;
            algoritmo.prepararNuevaIteracion();
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();
            algoritmo.Emparejar();

            String val = algoritmo.mostrarPoblacion();
            jTextArea1.setText( "ITERACION\n" + iteracion + " \n\n");
            jTextArea1.setText(jTextArea1.getText() + "PADRES--Fitness Total="  + algoritmo.fitnessTotal_ant + "\n" + val);
            

            //seleccionamos tipo de padre
            if(seleccionPadres.equals("Tipo1"))
            {
                algoritmo.seleccionTipo1();
            }
            else
            {
                algoritmo.SeleccionTipo2();
            }
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();

            //val = algoritmo.mostrarPoblacion();
            //jTextArea1.setText(jTextArea1.getText() + "SELECCION_TIPO1\n" +val);

            algoritmo.Emparejar();
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();
            //val = algoritmo.mostrarPoblacion();
            //jTextArea1.setText( jTextArea1.getText() + "EMPAREJADA2\n" + val);

            //realización de cruce
            if(cruce == 0)
            {
                algoritmo.cruce1X();
            }
            else
            {
                algoritmo.cruceMascarCruce();
            }
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();
            //val = algoritmo.mostrarPoblacion();
            //jTextArea1.setText(jTextArea1.getText() + "CRUCE1X\n" + val);

            algoritmo.mutar();
            

            if(tipoReemplazo == 0)
            {
                algoritmo.reemplazoEtilistaGeneral();
            }
            else
            {
                algoritmo.reemplazoAleatorio();
            }

            //calculamos fitness de las poblaciones
            algoritmo.calcularFitness_ant();
            algoritmo.calcularFitness_sig();
            
            val = algoritmo.mostrarPoblacion();
            jTextArea1.setText(jTextArea1.getText() + "DESCENDIENTES--Fitness Total="  + algoritmo.fitnessTotal_sig + "\n" + val);
            
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
